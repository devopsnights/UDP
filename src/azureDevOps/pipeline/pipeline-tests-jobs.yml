parameters:
  - name: resource
    type: object
  - name: globalConfiguration
    type: object

jobs:
  - job: BuildJob
    displayName: Build Job
    steps:
      - checkout: self
        persistCredentials: true

      # - template: ../../cloud/azure/appConfiguration/azure-appConfiguration-pullSecrets-jobs.yml 
      #   parameters:
      #     environment: ${{ parameters.resource.tests.environmentToValidate }}        
      #     globalConfiguration: ${{ parameters.globalConfiguration }}
      #     serviceConnection: ${{ parameters.globalConfiguration.serviceConnection }}
      
      - task: AzureCLI@2
        inputs:
          azureSubscription: 'AzureServiceConnection'
          scriptType: 'pscore'
          scriptLocation: 'scriptPath'
          scriptPath: $(Build.SourcesDirectory)/src/azureDevOps/pipeline/run.pipeline.tests.ps1
          arguments: -TestResultsDirectory "$(Build.ArtifactStagingDirectory)/testResults/"
        env:
          # mapping global variables
          personalAccessToken: ${{ parameters.globalConfiguration.personalAccessToken }}
          customModulesDirectory: ${{ parameters.globalConfiguration.customModulesDirectory }}
          orgUrl: ${{ parameters.globalConfiguration.orgUrl }}
          testsTeamProject: ${{ parameters.globalConfiguration.testsTeamProject }}
          repository: ${{ parameters.globalConfiguration.repository }}
          serviceConnectionId: ${{ parameters.globalConfiguration.serviceConnectionId }}
          # mapping test specific variables
          yamlFilePath: ${{ parameters.resource.tests.yamlFilePath }}
          pipelineName: ${{ parameters.resource.tests.pipelineName }}
          timeoutMinutes: ${{ parameters.resource.tests.timeoutMinutes }}
          testFilesToRun: ${{ parameters.resource.tests.testFilesToRun }}
          skipTeardown: ${{ parameters.resource.tests.skipTeardown }}
          # complementary environment variables provided by client
          ${{ each parameter in parameters.resource.tests.environmentParameters }}:
            ${{ parameter.Key }}: ${{ parameter.Value }}

      - task: PublishTestResults@2
        inputs:
          testRunner: "NUnit" 
          testResultsFiles: "$(Build.ArtifactStagingDirectory)/testResults/**/testResults.xml"
          testRunTitle: "PS_Win2016_Unit"
          failTaskOnFailedTests: true
        displayName: "Publish Unit Test Results"
        condition: in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues', 'Failed')

      - task: PublishCodeCoverageResults@1
        inputs:
          summaryFileLocation: "$(Build.ArtifactStagingDirectory)/testResults/**/coverage.xml"
          failIfCoverageEmpty: false
        displayName: "Publish Unit Test Code Coverage"
        condition: and(in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues', 'Failed'), eq(variables['System.PullRequest.IsFork'], false))
        enabled: false