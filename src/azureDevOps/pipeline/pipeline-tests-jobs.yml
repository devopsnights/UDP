parameters:
  - name: resource
    type: object
  - name: globalConfiguration
    type: object

jobs:
  - job: BuildJob
    displayName: Build Job
    steps:
      - checkout: self
        persistCredentials: true

      - template: ../appConfiguration/azure-appConfiguration-pullSecrets-jobs.yml 
        parameters:
          environment: ${{ parameters.environment }}        
          globalConfiguration: ${{ parameters.globalConfiguration }}
          serviceConnection: ${{ parameters.serviceConnection }}
      
      - task: AzurePowerShell@4
        displayName: Running Unit Tests
        enabled: true
        inputs:
          azureSubscription: AzureServiceConnection
          scriptType: "FilePath"
          scriptPath: $(Build.SourcesDirectory)/src/azureDevOps/pipeline/run.pipeline.tests.ps1
          scriptArguments: -TestResultsDirectory "$(Build.ArtifactStagingDirectory)/testResults/"
          azurePowerShellVersion: "latestVersion"
          errorActionPreference: "continue"
        env:
          # mapping global variables
          personalAccessToken: ${{ parameters.globalConfiguration.personalAccessToken }}
          customModulesDirectory: ${{ parameters.globalConfiguration.customModulesDirectory }}
          orgUrl: ${{ parameters.globalConfiguration.orgUrl }}
          testsTeamProject: ${{ parameters.globalConfiguration.testsTeamProject }}
          repository: ${{ parameters.globalConfiguration.repository }}
          serviceConnectionId: ${{ parameters.globalConfiguration.serviceConnectionId }}
          # mapping test specific variables
          yamlFilePath: ${{ parameters.resource.tests.yamlFilePath }}
          pipelineName: ${{ parameters.resource.tests.pipelineName }}
          timeoutMinutes: ${{ parameters.resource.tests.timeoutMinutes }}
          testFilesToRun: ${{ parameters.resource.tests.testFilesToRun }}
          skipTeardown: ${{ parameters.resource.tests.skipTeardown }}
          # complementary environment variables provided by client
          ${{ each parameter in parameters.resource.tests.environmentParameters }}:
            ${{ parameter.Key }}: ${{ parameter.Value }}

      # - ${{ if ne(parameters.resource.tests.complementaryTestsSteps, 'true') }}: 
      #   - template:  ${{ parameters.resource.tests.complementaryTestsSteps }}
      #     parameters:
      #       resource: ${{ parameters.resource }}
      #       globalConfiguration: ${{ parameters.globalConfiguration }}


      - task: PublishTestResults@2
        inputs:
          testRunner: "NUnit" 
          testResultsFiles: "$(Build.ArtifactStagingDirectory)/testResults/**/testResults.xml"
          testRunTitle: "PS_Win2016_Unit"
          failTaskOnFailedTests: true
        displayName: "Publish Unit Test Results"
        condition: in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues', 'Failed')

      - task: PublishCodeCoverageResults@1
        inputs:
          summaryFileLocation: "$(Build.ArtifactStagingDirectory)/testResults/**/coverage.xml"
          failIfCoverageEmpty: false
        displayName: "Publish Unit Test Code Coverage"
        condition: and(in(variables['Agent.JobStatus'], 'Succeeded', 'SucceededWithIssues', 'Failed'), eq(variables['System.PullRequest.IsFork'], false))
        enabled: false